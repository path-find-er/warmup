total: 1508

warmup/
  run.ipynb
  vercel.json
  jest.setup.js
  jest.config.js
  next.config.js
  next-sitemap.config.js
  .npmrc
  next-env.d.ts
  .prettierignore
  tailwind.config.ts
  yarn.lock
  .gitignore
  package.json
  .prettierrc.js
  .eslintrc.js
  commitlint.config.js
  plan.md
  tsconfig.json
  .env.example
  postcss.config.js
  output.txt
  public/
    favicon.ico
    .DS_Store
    svg/
      Vercel.svg
      Logo.svg
    images/
      new-tab.png
      og.jpg
    fonts/
      inter-var-latin.woff2
  src/
    state.ts
    utils.ts
    types.ts
    __mocks__/
      svg.tsx
    app/
      layout.tsx
      page.tsx
      not-found.tsx
      components/
        layout.tsx
        page.tsx
      api/
        hello/
          route.ts
    styles/
      globals.css
    components/
      NextImage.tsx
      Skeleton.tsx
      buttons/
        TextButton.tsx
        IconButton.tsx
        Button.tsx
      game/
        Settings.tsx
        Game.tsx
        Scores.tsx
        Level.tsx
        settings/
          TimeLimitSelector.tsx
          OperationToggle.tsx
          DifficultySelector.tsx
        display/
          PauseButton.tsx
          InputCell.tsx
      links/
        ArrowLink.tsx
        IconLink.tsx
        UnderlineLink.tsx
        UnstyledLink.tsx
        PrimaryLink.tsx
        ButtonLink.tsx
    __tests__/
      pages/
    constant/
      env.ts
      config.ts
    lib/
      og.ts
      helper.ts
      utils.ts
      logger.ts
      __tests__/

---

```typescript
// src/types.ts
export type Challenge = { test: number; correct?: boolean; attempt?: number; }; export type Operation = 'add' | 'subtract'; export type difficultyRange = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9; export type Level = { challenges: Challenge[]; currentChallenge: number; }; export type scores = { currentScore: number; previousScores: number[]; }; export type GameSettings = { difficulty: difficultyRange; timeLimit: number; operation: Operation; }; export type GameState = { level: Level; scores: scores; settings: GameSettings; isPaused: boolean; }; export type GameAction = | { type: 'UPDATE_DIFFICULTY'; payload: { difficulty: difficultyRange; }; } | { type: 'UPDATE_OPERATION'; payload: { operation: Operation; }; } | { type: 'UPDATE_TIME_LIMIT'; payload: { timeLimit: number; }; } | { type: 'ATTEMPT'; payload: { index: number; attempt: number; }; } | { type: 'TOO_SLOW'; payload: { index: number; attempt: number; }; } | { type: 'RESUME' } | { type: 'PAUSE' } 
```

---

```typescript
// src/components/game/Level.tsx
import React, { useEffect, useRef } from 'react'; import InputCell from '@/components/game/display/InputCell'; import PauseButton from './display/PauseButton'; import { GameAction } from '@/types'; import { GameState } from '@/types'; interface LevelProps { state: GameState; dispatch: React.Dispatch<GameAction>; } const Level: React.FC<LevelProps> = ({ state, dispatch }) => { const { level: { challenges, currentChallenge }, settings: { timeLimit }, isPaused, } = state; const timerRef = useRef<ReturnType<typeof setTimeout> | null>(null); useEffect(() => { if (timerRef.current) clearTimeout(timerRef.current); if (timeLimit > 0 && !isPaused) { timerRef.current = setTimeout(() => { const newAttempt = challenges[currentChallenge].attempt; dispatch({ type: 'TOO_SLOW', payload: { index: currentChallenge, attempt: newAttempt ?? 0 }, }); }, timeLimit * 1000); } return () => { if (timerRef.current) clearTimeout(timerRef.current); }; }, [challenges, currentChallenge, dispatch, isPaused, timeLimit]); return ( <> <div className='my-4 flex w-full flex-row rounded bg-white p-4 shadow-md'> {challenges.map((challenge, index) => ( <div key={`${index}-challenge-${challenge.test}`} className='flex w-full flex-col items-center' > <div className='w-full border border-gray-300 px-2 py-1 text-center text-gray-700 sm:mx-2'> {challenge.test} </div> <InputCell challengeIndex={index} dispatch={dispatch} attempt={challenge.attempt} correct={challenge.correct} isCurrent={state.level.currentChallenge === index} /> </div> ))} </div> <PauseButton dispatch={dispatch} isPaused={isPaused} /> </> ); }; export default Level; 
```

---

```typescript
// src/components/game/display/InputCell.tsx
 import React, { useEffect, useRef, useState } from 'react'; import { GameAction } from '@/types'; export const InputCell: React.FC<{ challengeIndex: number; correct?: boolean; attempt?: number; dispatch: React.Dispatch<GameAction>; isCurrent?: boolean; }> = ({ challengeIndex, dispatch, correct, attempt, isCurrent }) => { const [inputValue, setInputValue] = useState<number | undefined>(attempt); useEffect(() => { setInputValue(attempt); }, [attempt]); const inputRef = useRef<HTMLInputElement | null>(null); const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => { try { const newValue = parseInt(event.target.value); if (newValue >= 0 && newValue <= 9) { setInputValue(newValue); dispatch({ type: 'ATTEMPT', payload: { index: challengeIndex, attempt: newValue }, }); dispatch({ type: 'RESUME' }); } else { setInputValue(0); } } catch (error) { throw new Error(error as string); } }; useEffect(() => { if (isCurrent && inputRef.current) { inputRef.current.focus(); } }, [isCurrent]); const classname = ' sm:mx-2 border border-gray-300 h-full w-full text-center px-2 py-1 '; if (correct === false) { return <div className={`${classname} text-red-500`}>{attempt}</div>; } else if (correct === true) { return <div className={`${classname} text-green-500`}>{attempt}</div>; } else if (isCurrent) { return ( <input ref={inputRef} className={`${classname} text-gray-700`} contentEditable={true} onChange={handleInputChange} value={inputValue} /> ); } else { return ( <div className={`${classname} bg-slate-100 text-gray-700`}>{attempt}</div> ); } }; export default InputCell; 
```